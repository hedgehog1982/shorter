 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var validUrl = require('valid-url');  //npm install valid-url // checks to see if URL is live
var app = express();

function isValidURL(URL){
if (validUrl.isUri(URL)){
    return true;
} 
else {
    return false
}
  
}

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

// FOR all routes see if it is a valid http
app.use(function(req, res, next){

    var originalURL = (req.originalUrl).split("").slice(1).join("") //read in original url remove /
    
    if (!isValidURL(originalURL)) {  	// can i connect to the URL supplied? if not throw an error saves the pain of REGEX
      res.sendFile(process.cwd() + '/views/error.html');
    } else {  // i want to generate 6 random letters 
      
    }
  
  
  
  
  console.log(originalURL + " is " + isValidURL(originalURL));
  
  
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

