 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var validUrl = require('valid-url');  //npm install valid-url // checks to see if URL is live
var app = express();

function genShort (){
  var shortCode = [];
  var caseType;
  for (var i = 0 ; i < 6; i++){
    if (Math.floor(Math.random() * 2) === 0){
      caseType = 65; // for an uppercase letter
    } else {
      caseType = 97; //for lowercase
    }
    shortCode[i] = String.fromCharCode(Math.floor(Math.random() * 25) + caseType); // genearte number between 0 and 25 and turn it into an upper or lowercase letter
  }
  return (shortCode.join(""));
}
  
  
  


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

// FOR all routes see if it is a valid http
app.use(function(req, res, next){


    var originalURL = (req.originalUrl).split("").slice(1).join("") //read in original url remove /

    if (validUrl.isUri(originalURL)) {  	// can i connect to the URL supplied? if not throw an error saves the pain of REGEX
        var urlJSON = { "original_url" : "" ,"short_url" : ""};
            // I also need to check if they have been used before so it doesnt get overwritten, highly unlikely)
                urlJSON["original_url"] = originalURL;
                urlJSON["short_url"] = (req.protocol + "://" + req.get('host') + "/" + genShort() + "/");
                //res.send(" Your shortend URL for " + originalURL + " is " + req.protocol + "://" + req.get('host') + "/" + genShort() + "/");  // need to generate html on fly because this is awful
              res.send(urlJSON);
    } else if (originalURL.length ===6){  // if it is 6 letters long it may be a shortcode need to check if its a shortcode
      
      //if it not on database
      if ( 1 === 1){
        var shortError = {"error":"This url is not on the database."}
        res.send(shortError)
        } else {  // url is on database so redirect
          
                res.redirect('http://google.com'); //using this for forwarding  
        }
      
      
      
      
      
    } else {          //if  its not a valid email and its not a vailid shortcode
      var urlError = { "error":"Wrong url format, make sure you have a valid protocol and real site."};
      res.send(urlError);
    
    }    
      

  
});


// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

